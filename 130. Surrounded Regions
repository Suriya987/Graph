You are given an m x n matrix board containing letters 'X' and 'O', capture regions that are surrounded:

Connect: A cell is connected to adjacent cells horizontally or vertically.
Region: To form a region connect every 'O' cell.
Surround: The region is surrounded with 'X' cells if you can connect the region with 'X' cells and none of the region cells are on the edge of the board.
A surrounded region is captured by replacing all 'O's with 'X's in the input matrix board.

 

Example 1:

Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]

Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]

Explanation:


In the above diagram, the bottom region is not captured because it is on the edge of the board and cannot be surrounded.

Example 2:

Input: board = [["X"]]

Output: [["X"]]

Soln:

Time complexity : O(NxMx4) + O(N)+O(M)
  O(NxMx4)  -> For DFS and for traversing 4 neighbours each index
  O(N)+O(M) -> For looping outer index 
So, Overall ~O(NxM)
Space complexity : O(NxM) + O(NxM)  ,  For Auxillary stack space and visted matrix 

class Solution {
    private:
      void dfs(int i,int j,vector<vector<int>>&vis,vector<vector<char>>&res,vector<int>&delRow,vector<int>&delCol)
      {
            vis[i][j]=1;
         
           for(int k=0;k<4;k++)
           {

                int nRow=i+delRow[k];
                int nCol=j+delCol[k];

                if(nRow>=0 && nRow<res.size() && nCol>=0 && nCol<res[0].size() && vis[nRow][nCol]==0 &&
                 res[nRow][nCol]=='O')
                 {
                    dfs(nRow,nCol,vis,res,delRow,delCol);
                 }
           }

      }
    public:
     void solve(vector<vector<char>>& res) {
          int n=res.size();
          int m=res[0].size();
          vector<vector<int>>vis(n,vector<int>(m,0));
              vector<int>row={-1,1,0,0};
              vector<int>col={0,0,-1,1};
            //top and bottom row
            for(int i=0;i<m;i++)
            {
                //top
                if(res[0][i]=='O' && vis[0][i]==0)
                   dfs(0,i,vis,res,row,col);
                
                 //bottom
                 if(res[n-1][i]=='O' && vis[n-1][i]==0)
                  dfs(n-1,i,vis,res,row,col);
            }


            //left and right col
            for(int j=0;j<n;j++)
            {
                 //left 
                 if(res[j][0]=='O' && vis[j][0]==0)
                 dfs(j,0,vis,res,row,col);

                 //right
                 if(res[j][m-1]=='O' && vis[j][m-1]==0)
                 dfs(j,m-1,vis,res,row,col);
            }
      
           for(int i=0;i<n;i++)
           {
            for(int j=0;j<m;j++)
            {
                if(vis[i][j]==0 && res[i][j]=='O' )
                  res[i][j]='X';
               
            }
           }
       
     }
};
