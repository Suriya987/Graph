There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, 
then city a is connected indirectly with city c.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.

Return the total number of provinces.

Example 1:
Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2

Example 2:
Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]
Output: 3

Soln:

Time complexity : O(N) + O(V+2E)    O(N) -> for outer loop , O(V+2E)  DFS traversal  {  V for node ,  2E for each node may have least of 2 connected nodes }
Space complexity : O(N)+O(N)+O(N)


class Solution {
    private:
     void dfs(vector<int> adjLis[],vector<int>&vis,int node)
     {
        vis[node]=1;

        for(auto it: adjLis[node])
        {
            if(!vis[it])
            {
                dfs(adjLis,vis,it);
            }
        }
     }
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        
        // converting it into adjList
        int N=isConnected.size();
        //int N=sizeof(isConnected)/sizeof(isConnected[0]);
        vector<int> adjLis[N];

        for(int i=0;i<N;i++)
        {
            for(int j=0;j<N;j++)
            {
                if(isConnected[i][j]==1 && i!=j){
                adjLis[i].push_back(j);
                adjLis[j].push_back(i);
                }
            }
        }
        //  int vis[N]={0};
        vector<int>vis(N,0);
         int cnt=0;
        //dfs
        for(int i=0;i<N;i++)
        {
              if(!vis[i])
              {
                  cnt++;
                 dfs(adjLis,vis,i);
              }
        }
        return cnt; 
        

    }
};

 
