Given an undirected graph with V vertices labelled from 0 to V-1 and E edges, check whether the graph contains any
cycle or not. The Graph is represented as an adjacency list, where adj[i] contains all the vertices that are directly 
connected to vertex i.

NOTE: The adjacency list represents undirected edges, meaning that if there is an edge between vertex i and vertex j,
both j will be adj[i] and i will be in adj[j].

Examples:

Input: adj = [[1], [0,2,4], [1,3], [2,4], [1,3]] 
Output: 1
Explanation: 

1->2->3->4->1 is a cycle.
Input: adj = [[], [2], [1,3], [2]]
Output: 0
Explanation: 

No cycle in the graph.


Soln:

Time complexity : O(N)+O(N+2E)
Space complexity : O(N)+O(N)

class Solution {
  private:
    bool dfs(int node,int parent,int vis[],vector<vector<int>>& adj)
    {
         vis[node]=1;
         
         for(auto it:adj[node])
         {
             if(!vis[it]) 
              {
               if(dfs(it,node,vis,adj)==true)
               {
                   return true;
               }
              }
               else if(it!=parent)
               {
                   return true; 
               }
         }
         return false;
    }
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(vector<vector<int>>& adj) {
        int N=adj.size();
         int vis[N]={0};
         
         for(int i=0;i<N;i++)
         {
             if(!vis[i])
             {
                if(dfs(i,-1,vis,adj)==true)
                  return true;
             }
         }
         return false;
    }
};
