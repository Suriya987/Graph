Given a connected undirected graph represented by an adjacency list adj, which is a vector of vectors where each adj[i] represents
the list of vertices connected to vertex i. Perform a Depth First Traversal (DFS) starting from vertex 0, visiting vertices from left to 
right as per the adjacency list, and return a list containing the DFS traversal of the graph.

Note: Do traverse in the same order as they are in the adjacency list.


Input: adj = [[2,3,1], [0], [0,4], [0], [2]]

Output: [0, 2, 4, 3, 1]
Explanation: Starting from 0, the DFS traversal proceeds as follows: 
Visit 0 → Output: 0 
Visit 2 (the first neighbor of 0) → Output: 0, 2 
Visit 4 (the first neighbor of 2) → Output: 0, 2, 4 
Backtrack to 2, then backtrack to 0, and visit 3 → Output: 0, 2, 4, 3 
Finally, backtrack to 0 and visit 1 → Final Output: 0, 2, 4, 3, 1

Soln:

Time complexity :  O(N)+O(2E)     2E-> no.of edges    ..For directed graph it depends on no.of neighbours
Space complexity : O(N)+O(N)+O(N)  ~O(N)

class Solution {
  public:
     void dfs(vector<vector<int>>& adj,int node,int vis[],vector<int>&res)
     {
         vis[node]=1;
         res.push_back(node);
         
         //we have to check the adj
         
         for(auto it:adj[node])
         {
             if(vis[it]==0)
             {
                // res.push_back(it);
                  dfs(adj,it,vis,res);
             }
         }
         
     }
    // Function to return a list containing the DFS traversal of the graph.
    vector<int> dfsOfGraph(vector<vector<int>>& adj) {
        
        int n=adj.size();
        vector<int>res;
        int vis[n]={0};
        dfs(adj,0,vis,res);
        return res;
    }
};
